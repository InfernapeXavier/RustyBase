use std::str::FromStr;
use crate::parsedefs;
use crate::parsedefs::{Operand, ComparisonOp, OrList, AndList, FuncOperand, FuncOperator, NameList, TableList, Final};
grammar();

match {
    "SELECT",
    "FROM",
    "WHERE",
    "SUM",
    "AND",
    "GROUP",
    "DISTINCT",
    "BY",
    "OR",
    "AS",
    "(",
    "<",
    ">",
    "=",
    ")",
    "+",
    "-",
    "/",
    "*",
    ",",
    r"[0-9]+", // Int
    r"[0-9]+\.[0-9]*", // Float
    r"[A-Za-z][A-Za-z0-9_-]*", // Name 
    r"[A-Za-z][A-Za-z0-9_-]*\.[A-Za-z][A-Za-z0-9_-]*", // Name
    r"'[^\n]*'", // String


    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`
}

pub SQL: Final = {
    SELECT <w:WhatIWant> FROM <t:Tables> WHERE <a:ParseTree> => {
        let mut final_val = w;
        final_val.tables = Some(t);
        final_val.boolean = Some(a);
        final_val
    },

    SELECT <w:WhatIWant> FROM <t:Tables> WHERE <a:ParseTree> GROUP BY <att:Atts> => {
        let mut final_val = w;
        final_val.tables = Some(t);
        final_val.boolean = Some(a);
        final_val.grouping_atts = Some(att);
        final_val
    }
}

WhatIWant: Final = {
    <f:Function> "," <a:Atts> => {
        let mut final_val = Final::new();
        final_val.final_function = f.1;
        final_val.atts_to_select = Some(a);
        final_val.distinct_func = f.0;
        final_val
    },
    Function => {
        let mut final_val = Final::new();
        final_val.final_function = <>.1;
        final_val.distinct_func = <>.0;
        final_val
    },
    Atts => {
        let mut final_val = Final::new();
        final_val.atts_to_select = Some(<>);
        final_val
    },
    DISTINCT <a:Atts> => {
        let mut final_val = Final::new();
        final_val.atts_to_select = Some(a);
        final_val.distinct_atts = true;
        final_val
    }
}

Function: (bool, Option<FuncOperator>) = {
    SUM "(" <exp:CompoundExp> ")" => (false, Some(exp)),
    SUM DISTINCT "(" <exp:CompoundExp> ")" => (true, Some(exp)),
}

Atts: NameList = {
    NAME => NameList::new(<>, None),
    <n:Atts> "," <al:NAME> => NameList::new(al, Some(Box::new(n))),
}

Tables: TableList = {
    <og:NAME> AS <al:NAME> => TableList::new(og, al, None),
    <n:Tables> "," <og:NAME> AS <al:NAME> => TableList::new(og, al, Some(Box::new(n))),
}


// Functional Parsing
CompoundExp: FuncOperator = {
    <l:SimpleExp> <m:Op> <r:CompoundExp> => {
        let add = String::from("+");
        let sub = String::from("-");
        let mul = String::from("*");
        let div = String::from("/");

        let code = match m {
            a if a == add => parsedefs::ADD,
            a if a == sub => parsedefs::SUB,
            a if a == mul => parsedefs::MUL,
            a if a == div => parsedefs::DIV,
            _ => panic!("Error Parsing Expression"),
        };
        let left_operator = FuncOperator::new(code, None, Some(Box::new(l)), None);
        FuncOperator::new(code, Some(Box::new(left_operator)), None, Some(Box::new(r)))
    },

    "(" <l:CompoundExp> ")" <m:Op > <r:CompoundExp> => {
        let add = String::from("+");
        let sub = String::from("-");
        let mul = String::from("*");
        let div = String::from("/");

        let code = match m {
            a if a == add => parsedefs::ADD,
            a if a == sub => parsedefs::SUB,
            a if a == mul => parsedefs::MUL,
            a if a == div => parsedefs::DIV,
            _ => panic!("Error Parsing Expression"),
        };
        FuncOperator::new(code, Some(Box::new(l)), None, Some(Box::new(r)))
    },

    "(" <o:CompoundExp> ")" => o,

    SimpleExp => {
        FuncOperator::new(0, None, Some(Box::new(<>)), None)
    },

    "-" <o:CompoundExp> => {
        FuncOperator::new(parsedefs::SUB, Some(Box::new(o)), None, None)
    }
};

Op: String = {
    "-" => (<>).to_string(),
    "+" => (<>).to_string(),
    "/" => (<>).to_string(),
    "*" => (<>).to_string(),
};

// Returns Operand built with the DataType and the input value
SimpleExp: FuncOperand = {
    INT => {
        FuncOperand::new(parsedefs::INT, <>)
    },

    DOUBLE => {
        FuncOperand::new(parsedefs::DOUBLE, <>)
    },

    STRING => {
       FuncOperand::new(parsedefs::STRING, <>)
    },

    NAME => {
        FuncOperand::new(parsedefs::NAME, <>)
    },
};


// Boolean Parsing
// Returns the final ParseTree via ParseTreeParser
ParseTree: AndList = {
    "(" <o:OrList> ")" AND <a:ParseTree> => {
        AndList::new(Box::new(o), Some(Box::new(a)))
    },

    "(" <o:OrList> ")" => {
        AndList::new(Box::new(o), None)
    }
};

// Returns OrList
OrList: OrList = {
    <l:Condition> OR <r:OrList> => {
        OrList::new(l,Some(Box::new(r)))
    },
    
    Condition => {
        OrList::new(<>, None)
    }
}

// Returns ComparisonOp built with the Operator, Left Operand and Right Operand
Condition: ComparisonOp = {
    <l:Literal> "<" <r:Literal> => {
        ComparisonOp::new(parsedefs::LESS_THAN,l,r)
    },

    <l:Literal> ">" <r:Literal> => {
        ComparisonOp::new(parsedefs::GREATER_THAN,l,r)
    },

    <l:Literal> "=" <r:Literal> => {
        ComparisonOp::new(parsedefs::EQUALS,l,r)
    },

    Literal => {
        let lit_one = <>;
        let lit_two = lit_one.clone();
        ComparisonOp::new(parsedefs::EQUALS, lit_one, lit_two)
    }
};

// Returns Operand built with the DataType and the input value
Literal: Operand = {
    INT => {
        Operand::new(parsedefs::INT, <>)
    },

    DOUBLE => {
        Operand::new(parsedefs::DOUBLE, <>)
    },

    STRING => {
       Operand::new(parsedefs::STRING, <>)
    },

    NAME => {
        Operand::new(parsedefs::NAME, <>)
    }
};


// SQL Keywords
SELECT: String = {
    "SELECT" => (<>).to_string(),
}

FROM: String = {
    "FROM" => (<>).to_string(),
}

WHERE: String = {
    "WHERE" => (<>).to_string(),
}

SUM: String = {
    "SUM" => (<>).to_string(),
}

AND: String = {
    "AND" => (<>).to_string(), 
}

GROUP: String = {
    "GROUP" => (<>).to_string(),
}

DISTINCT: String = {
    "DISTINCT" => (<>).to_string(),
}

BY: String = {
    "BY" => (<>).to_string(),
}

OR: String = {
    "OR" => (<>).to_string(),
}

AS: String = {
    "AS" => (<>).to_string(),
}

// Data Literals
INT: String = {
    r"[0-9]+" => (<>).to_string(), // returns number as string
}

DOUBLE: String = {
    r"[0-9]+\.[0-9]*" => (<>).to_string(), // returns number as string
};

STRING: String = {
    r"'[^\n]*'" => {
        let len = (<>).len();
        let s = <>.to_string();
        let slice = &s[1..(len-1)];
        let final_slice = &slice.replace("\\", ""); // handles "'" in strings
        final_slice.to_string()
    }
}

NAME: String = {
    r"[A-Za-z][A-Za-z0-9_-]*" => (<>).to_string(), //returns string when it is a name
    r"[A-Za-z][A-Za-z0-9_-]*\.[A-Za-z][A-Za-z0-9_-]*" => (<>).to_string(), //returns string when it is a name
}
