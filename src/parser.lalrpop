use std::str::FromStr;
use crate::parsedefs;
use crate::parsedefs::{Operand, ComparisonOp, OrList, AndList};
grammar;

match {
    "<",
    "=",
    ">",
    "(",
    ")",
    "AND",
    "OR",
    r"[0-9]+", // Int
    r"[0-9]+\.[0-9]*", // Float
    r"[A-Za-z][A-Za-z0-9_-]*", // Name
    r"'[^\n]*'", // String


    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`
    // TODO:Handle "'" in Strings
}

pub ParseTree: AndList = {
    "(" <o:OrList> ")" AND <a:ParseTree> => {
        AndList::new(Box::new(o), Some(Box::new(a)))
    },

    "(" <o:OrList> ")" => {
        AndList::new(Box::new(o), None)
    }
};

OrList: OrList = {
    <l:Condition> OR <r:OrList> => {
        OrList::new(l,Some(Box::new(r)))
    },
    
    Condition => {
        OrList::new(<>, None)
    }
}

Condition: ComparisonOp = {
    <l:Literal> "<" <r:Literal> => {
        ComparisonOp::new(parsedefs::LESS_THAN,l,r)
    },

    <l:Literal> ">" <r:Literal> => {
        ComparisonOp::new(parsedefs::GREATER_THAN,l,r)
    },

    <l:Literal> "=" <r:Literal> => {
        ComparisonOp::new(parsedefs::EQUALS,l,r)
    }
};

Literal: Operand = {
    INT => {
        Operand::new(parsedefs::INT, <>)
    },

    DOUBLE => {
        Operand::new(parsedefs::DOUBLE, <>)
    },

    STRING => {
       Operand::new(parsedefs::STRING, <>)
    },

    NAME => {
        Operand::new(parsedefs::NAME, <>)
    }
};

INT: String = {
    r"[0-9]+" => (<>).to_string(),
}

DOUBLE: String = {
    r"[0-9]+\.[0-9]*" => (<>).to_string(),
};

STRING: String = {
    r"'[^\n]*'" => {
        let len = (<>).len();
        let s = <>.to_string();
        let slice = &s[1..(len-1)];
        let final_slice = &slice.replace("\\", "");
        final_slice.to_string()
    }
}

NAME: String = {
    r"[A-Za-z][A-Za-z0-9_-]*" => (<>).to_string(),

}

OR: String = {
    "OR" => (<>).to_string(),
}

AND: String = {
    "AND" => (<>).to_string(),
}